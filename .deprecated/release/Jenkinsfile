@Library('juju-pipeline@master') _

def release_id = params.RELEASE_ID
def tracker_sh = "tox -e py36 -- python3 jobs/release/release-tracker.py --release-id ${release_id}"

pipeline {
    agent {
        label 'runner'
    }
    options {
        ansiColor('xterm')
        timestamps()
    }
    stages {
        stage('Tag current stable branches') {
            when {
                expression {
                    return sh(returnStatus: true, script: "${tracker_sh} get-phase --name tag-current-stable") != 0
                }
            }
            options {
                timeout(time: 1, unit: 'HOURS')
            }

            steps {
                build job:"sync-stable-tag-bundle-rev",
                    parameters: [string(name:'BUNDLE_REV', value: params.CURRENT_STABLE_BUNDLE_REV),
                                 string(name:'K8S_VERSION', value: params.CURRENT_STABLE_K8S_VERSION)]
            }
            post {
                failure {
                    sh "${tracker_sh} set-phase --name tag-current-stable --result fail"
                }
                success {
                    sh "${tracker_sh} set-phase --name tag-current-stable --result pass"
                }
            }
        }


        stage('Cut new stable branches') {
            when {
                expression {
                    return sh(returnStatus: true, script: "${tracker_sh} get-phase --name cut-stable-release") != 0
                }
            }
            options {
                timeout(time: 1, unit: 'HOURS')
            }

            steps {
                build job:"cut-stable-release"
            }
            post {
                failure {
                    sh "${tracker_sh} set-phase --name cut-stable-release --result fail"
                }
                success {
                    sh "${tracker_sh} set-phase --name cut-stable-release --result pass"
                }
            }
        }


        stage('Build and Promote charms') {
            /* NOTE: We must always cut these charm releases to the beta
             * channel as to not interfere with any concurrently running hotfix
             * builds/promotions. This can go away once charmstore supports tracks.
             */
            when {
                expression {
                    return sh(returnStatus: true, script: "${tracker_sh} get-phase --name promote-charms") != 0
                }
            }
            options {
                timeout(time: 1, unit: 'HOURS')
            }

            steps {
                build job:"build-charms",
                    parameters: [string(name:'LAYER_BRANCH', value: 'stable'),
                                 string(name:'CHARM_BRANCH', value: 'stable'),
                                 string(name:'TO_CHANNEL', value: params.CHARM_PROMOTE_TO)]
            }
            post {
                failure {
                    sh "${tracker_sh} set-phase --name promote-charms --result fail"
                }
                success {
                    sh "${tracker_sh} set-phase --name promote-charms --result pass"
                }
            }
        }

        // stage('Promote snaps to beta and candidate') {
        //     when {
        //         expression {
        //             res = sh(returnStdout: true, script: "${tracker_sh} get-phase --name promote-snaps").trim()
        //             return res != 'pass'
        //         }
        //     }

        //     options {
        //         timeout(time: 2, unit: 'HOURS')
        //     }

        //     steps {
        //         build job:"promote-all-arch-snaps",
        //             parameters: [string(name:'promote_from', value: params.snaps_promote_from),
        //                          string(name:'promote_to', value: params.snaps_promote_to)]
        //     }
        //     post {
        //         failure {
        //             sh "${tracker_sh} set-phase --name promote-snaps --result fail"
        //         }
        //         success {
        //             sh "${tracker_sh} set-phase --name promote-snaps --result pass"
        //         }
        //     }

        // }

        // stage('Validate: Conformance') {
        //     when {
        //         expression {
        //             res = sh(returnStdout: true, script: "${tracker_sh} get-phase --name conformance").trim()
        //             return res != 'pass'
        //         }
        //     }

        //     options {
        //         timeout(time: 4, unit: 'HOURS')
        //     }
        //     steps {
        //         build job:"conformance-v${k8sver}.x-canonical-kubernetes",
        //             parameters: [string(name:'cloud', value: "google/us-east1"),
        //                          string(name:'bundle_channel', value: params.test_bundle_channel),
        //                          string(name:'version_overlay', value: "jobs/overlays/${k8sver}-candidate-overlay.yaml")]
        //     }
        //     post {
        //         failure {
        //             sh "${tracker_sh} set-phase --name conformance --result fail"
        //         }
        //         success {
        //             sh "${tracker_sh} set-phase --name conformance --result pass"
        //         }
        //     }
        // }

        stage('Validate CK') {
            when {
                expression {
                    return sh(returnStatus: true, script: "${tracker_sh} get-phase --name validate") != 0
                }
            }
            options {
                timeout(time: 4, unit: 'HOURS')
            }

            steps {
                build job:"validate-ck",
                    parameters: [string(name:'JUJU_DEPLOY_CHANNEL', value: params.JUJU_DEPLOY_CHANNEL),
                                 string(name:'SNAP_VERSION', value: params.SNAP_VERSION)]
            }
            post {
                failure {
                    sh "${tracker_sh} set-phase --name validate --result fail"
                }
                success {
                    sh "${tracker_sh} set-phase --name validate --result pass"
                }
            }
        }

        // start minor upgrade
        stage('Validate: Minor Upgrades') {
            when {
                expression {
                    return sh(returnStatus: true, script: "${tracker_sh} get-phase --name validate-upgrade") != 0
                }
            }

            options {
                timeout(time: 4, unit: 'HOURS')
            }
            steps {
                build job:"validate-ck-upgrade",
                    parameters: [string(name:'JUJU_DEPLOY_CHANNEL', value: params.JUJU_DEPLOY_CHANNEL),
                                 string(name:'SNAP_VERSION_UPGRADE_TO', value: params.SNAP_VERSION_UPGRADE_TO)]
            }
            post {
                failure {
                    sh "${tracker_sh} set-phase --name validate-upgrade --result fail"
                }
                success {
                    sh "${tracker_sh} set-phase --name validate-upgrade --result pass"
                }
            }
        }

        // start calico
        stage('Validate: Calico') {
            when {
                expression {
                    return sh(returnStatus: true, script: "${tracker_sh} get-phase --name validate-calico") != 0
                }
            }

            options {
                timeout(time: 4, unit: 'HOURS')
            }

            steps {
                build job:"validate-ck-calico",
                    parameters: [string(name:'JUJU_DEPLOY_CHANNEL', value: params.JUJU_DEPLOY_CHANNEL),
                                 string(name:'SNAP_VERSION', value: params.SNAP_VERSION)]

            }
            post {
                failure {
                    sh "${tracker_sh} set-phase --name validate-calico --result fail"
                }
                success {
                    sh "${tracker_sh} set-phase --name validate-calico --result pass"
                }
            }
        }
        // end calico

        // start tigera
        stage('Validate: Tigera') {
            when {
                expression {
                    return sh(returnStatus: true, script: "${tracker_sh} get-phase --name validate-tigera") != 0
                }
            }

            options {
                timeout(time: 4, unit: 'HOURS')
            }
            steps {
                build job:"validate-ck-tigera-secure-ee",
                    parameters: [string(name:'JUJU_DEPLOY_CHANNEL', value: params.JUJU_DEPLOY_CHANNEL),
                                 string(name:'SNAP_VERSION', value: params.SNAP_VERSION)]
            }
            post {
                failure {
                    sh "${tracker_sh} set-phase --name validate-tigera --result fail"
                }
                success {
                    sh "${tracker_sh} set-phase --name validate-tigera --result pass"
                }
            }
        }
        // end tigera
        stage('Validate: Ceph') {
            when {
                expression {
                    return sh(returnStatus: true, script: "${tracker_sh} get-phase --name validate-ceph") != 0
                }
            }

            options {
                timeout(time: 4, unit: 'HOURS')
            }
            steps {
                build job:"validate-ck-ceph",
                    parameters: [string(name:'JUJU_DEPLOY_CHANNEL', value: params.JUJU_DEPLOY_CHANNEL),
                                 string(name:'SNAP_VERSION', value: params.SNAP_VERSION)]
            }
            post {
                failure {
                    sh "${tracker_sh} set-phase --name validate-ceph --result fail"
                }
                success {
                    sh "${tracker_sh} set-phase --name validate-ceph --result pass"
                }
            }
        }
        stage('Validate: AWS IAM') {
            when {
                expression {
                    return sh(returnStatus: true, script: "${tracker_sh} get-phase --name validate-aws-iam") != 0
                }
            }

            options {
                timeout(time: 4, unit: 'HOURS')
            }
            steps {
                build job:"validate-ck-aws-iam",
                    parameters: [string(name:'JUJU_DEPLOY_CHANNEL', value: params.JUJU_DEPLOY_CHANNEL),
                                 string(name:'SNAP_VERSION', value: params.SNAP_VERSION)]
            }
            post {
                failure {
                    sh "${tracker_sh} set-phase --name validate-ck-aws-iam --result fail"
                }
                success {
                    sh "${tracker_sh} set-phase --name validate-ck-aws-iam --result pass"
                }
            }
        }
    }
}
