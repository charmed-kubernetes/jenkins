@Library('juju-pipeline@master') _

// List of bundles to release to the charmstore
def bundle_mapping = [
    'cdk-flannel': [
        fragments: 'k8s/cdk cni/flannel',
        charmstore: 'cs:~containers/bundle/canonical-kubernetes',
    ],
    'core-flannel': [
        fragments: 'k8s/core cni/flannel',
        charmstore: 'cs:~containers/bundle/kubernetes-core'
    ],
    'cdk-flannel-elastic': [
        fragments: 'k8s/cdk cni/flannel monitor/elastic',
        charmstore: 'cs:~containers/bundle/canonical-kubernetes-elastic'
    ],
    'cdk-calico': [
        fragments: 'k8s/cdk cni/calico',
        charmstore: 'cs:~containers/bundle/kubernetes-calico'
    ],
    'cdk-canal': [
        fragments: 'k8s/cdk cni/canal',
        charmstore: 'cs:~containers/bundle/canonical-kubernetes-canal'
    ]
]

// List of charms to build and release
def build_charms = [
    'calico', 'canal', 'easyrsa', 'etcd', 'flannel', 'kubeapi-load-balancer', 'kubernetes-e2e',
    'kubernetes-master', 'kubernetes-worker'
]

def releaseBundle(bundle, charmstore) {
    // Releases bundle to defined charmstore namespace
    def revision = sh script:String.format("charm push %s %s  | tail -n +1 | head -1 | awk '{print \$2}'", bundle, charmstore), returnStdout: true
    sh script:String.format("charm release --channel edge %s", revision.trim()), returnStatus: true
}

pipeline {
    agent {
        label 'runner'
    }
    /* XXX: Global $PATH setting doesn't translate properly in pipelines
     https://stackoverflow.com/questions/43987005/jenkins-does-not-recognize-command-sh
     */
    environment {
        PATH = '/snap/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin'
        REPO_DIR = "${env.WORKSPACE}/bundle-kubernetes"
        BUNDLES_DIR = "${env.WORKSPACE}/tmp-bundles"
    }
    options {
        ansiColor('xterm')
        timestamps()
    }
    triggers {
        pollSCM('H/5 * * * *')
    }
    stages {
        stage('Setup') {
            steps {
                installTools()
                dir(env.REPO_DIR) {
                    git poll: true, url: params.bundle_repo
                }
            }
        }
        stage('Build Charms'){
            steps {
                script {
                    def jobs = [:]
                    build_charms.each { charm ->
                        jobs[charm] = {
                            stage(String.format("Build Charms: %s", charm)) {
                                build job: String.format("build-release-%s", charm)
                            }
                        }
                    }
                    parallel jobs
                }
            }
        }
        stage('Build Bundles') {
            steps {
                script {
                    def jobs = [:]
                    bundle_mapping.each { bundle, options ->
                        jobs[bundle] = {
                            stage(String.format("Build: %s", bundle)) {
                                sh script:String.format("%s/bundle -o %s/%s -c %s %s",
                                                        env.REPO_DIR,
                                                        env.BUNDLES_DIR,
                                                        bundle,
                                                        params.channel,
                                                        options.fragments), returnStatus: true
                            }
                        }
                    }
                    parallel jobs
                }
            }
        }
        stage('Release Bundles') {
            steps {
                script {
                    bundle_mapping.each { bundle, options ->
                        stage(String.format("Release: %s", bundle)) {
                            releaseBundle(String.format("%s/%s", env.BUNDLES_DIR, bundle), options.charmstore)
                        }
                    }
                }
            }
        }
    }
}
