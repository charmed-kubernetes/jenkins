# SCM ------------------------------------------------------------------------ #
- scm:
    name: k8s-jenkins-jenkaas
    scm:
      - git:
          url: https://github.com/charmed-kubernetes/jenkins.git
          branches:
            - 'main'
        skip-tag: true
        fastpoll: true
        shallow-clone: true
        clean: {before: true}


# PROPERTIES ----------------------------------------------------------------- #
# Dont run jobs if build, conformance, release, sync, or validation are running
- property:
    name: block-on-build-release
    properties:
      - build-blocker:
          use-build-blocker: true
          blocking-jobs:
            - "build-release.*"
            - "bundle-.*"
            - "conformance-.*"
            - "release-microk8s.*"
            - "sync-oci-images.*"
            - "validate-ck.*"
            - "validate-charm.*"
          block-level: 'GLOBAL'

# Dont run jobs if infrastructure jobs are running
- property:
    name: block-on-infra
    properties:
      - build-blocker:
          use-build-blocker: true
          blocking-jobs:
            - "infra.*"
          block-level: 'GLOBAL'


# PARAMETERS ----------------------------------------------------------------- #
- parameter:
    name: global-params
    parameters:
      - bool:
          name: DRY_RUN
          default: false
          description: dry-run nothing is actually done
      - bool:
          name: FORCE
          default: false
          description: force run regardless of condition

- parameter:
    name: lxc-runner-params
    # description: |-
    #    Job parameters used to init the lxc container used in the job.
    #    ci_lxc_init_runner will take each parameter and ensure
    #    these packages are installed within the container.
    parameters:
      - string:
          name: LXC_APT_LIST
          description: |-
            comma-separated list of apt packages to install into the container
          default: pip,python3-venv,python3-dev,libffi-dev
      - string:
          name: LXC_SNAP_LIST
          description: |-
            comma-separated list of snaps to install into the container
            if the snap requires multiple arguments
          default: kubectl,juju-wait,juju-crashdump,juju --channel=$juju_channel
      - string:
          name: LXC_PUSH_LIST
          description: |-
            comma-separated list of bin paths to push into the container
          default: /usr/local/bin/columbo
      - string:
          name: LXC_MOUNT_LIST
          description: |-
            comma-separated list of paths to mount in the container from $HOME to $LXC_HOME
          default: .local,.ssh,.aws,.azure

- parameter:
    name: juju-lts
    parameters:
      - string:
          name: juju_channel
          description: |-
            specify the juju channel to use
          default: 3/stable

- parameter:
    name: series-stable
    parameters:
      - string:
          name: series
          default: jammy
          description: |-
            Set default series to use in test deployment

- parameter:
    name: snap-params
    parameters:
      - string:
          name: SNAP_LIST
          default: jobs/includes/k8s-snap-list.inc
      - string:
          name: SNAP_PATCHES_LIST
      - bool:
          name: SNAP_FORCE
          default: false

- parameter:
    name: charms-stable
    parameters:
      - string:
          name: channel
          default: 1.32/stable
          description: channel for charmed-kubernetes bundle to deploy

- parameter:
    name: charms-edge
    parameters:
      - string:
          name: channel
          default: 1.32/edge
          description: channel for charmed-kubernetes bundle to deploy

- parameter:
    name: snap-stable
    parameters:
      - string:
          name: snap_version
          default: 1.32/stable
          description: channel for charmed-kubernetes snap used in deployment

- parameter:
    name: snap-beta
    parameters:
      - string:
          name: snap_version
          default: 1.32/beta
          description: channel for charmed-kubernetes snap used in deployment

- parameter:
    name: snap-edge
    parameters:
      - string:
          name: snap_version
          default: 1.32/edge
          description: channel for charmed-kubernetes snap used in deployment

- parameter:
    name: test-params
    parameters:
      - string:
          name: TEST_UPGRADE_SNAP_CHANNEL
          description: |
            Version of Kubernetes to upgrade to, in the form of<br>

            &lt;major&gt.&lt;minor&gt;/&lt;channel&gt; (ie, 1.16/edge).
          default: '1.16/candidate'
      - string:
          name: TEST_UPGRADE_CHARM_CHANNEL
          description: |
            Charmstore channel of the bundle to upgrade to.
          default: 'candidate'
      - string:
          name: TEST_UPGRADE_SNAPD_CHANNEL
          description: |
            Snap store channel of snapd to upgrade to.
          default: 'beta'

- parameter:
    name: juju-params
    parameters:
      - string:
          name: SNAP_VERSION
          description: |
            Version of Kubernetes to test against, in the form of<br>
            &lt;major&gt.&lt;minor&gt;/&lt;channel&gt; (ie, 1.16/edge).
      - string:
          name: JUJU_CONTROLLER
          description: |
            The Juju controller to create and reference during run.
      - string:
          name: JUJU_MODEL
          description: |
            The Juju model to create and reference during run.
      - string:
          name: JUJU_CLOUD
          description: |
            The Juju cloud to create and reference during run.
      - string:
          name: JUJU_BOOTSTRAP_CONSTRAINTS
          description: |
            Juju bootstrap constraints (ie, 'arch=amd64')
      - bool:
          name: JUJU_BOOTSTRAP_DEBUG
          description: |
            Juju bootstrap with debugging output.
      - bool:
          name: JUJU_BOOTSTRAP_DISABLE_ADD_MODEL
          description: |
            Disable creating JUJU_MODEL after bootstrap. Useful if model
            configuration changes need to take place prior.
      - string:
          name: JUJU_DEPLOY_BUNDLE
          description: |
            The Juju bundle to deploy.
      - string:
          name: JUJU_DEPLOY_CHANNEL
          description: |
            The Juju bundle channel to deploy from (ie, stable, candidate, beta, edge).
      - string:
          name: JUJU_DEPLOY_OVERLAY
          description: |
            Path to a YAML overlay bundle fragment

- parameter:
    name: charm-params
    parameters:
      - string:
          name: LAYER_INDEX
          default: 'https://charmed-kubernetes.github.io/layer-index/'
      - string:
          name: LAYER_LIST
          default: "jobs/includes/charm-layer-list.inc"
      - string:
          name: LAYER_BRANCH
          default: 'main'
          description: |
            The layer git branch to checkout prior to building
      - string:
          name: CHARM_BRANCH
          default: ''
          description: |
            The charm git branch to checkout prior to building.
            If empty, the default repo branch will be used.
      - string:
          name: CHARM_LIST
          default: "jobs/includes/charm-support-matrix.inc"
      - string:
          name: BUNDLE_LIST
          default: "jobs/includes/charm-bundles-list.inc"
      - string:
          name: BUNDLE_BRANCH
          default: "main"
          description: |
            The bundle branch to build k8s from.
      - string:
          name: BUNDLE_REPO
          default: "https://github.com/charmed-kubernetes/bundle.git"
      - string:
          name: RESOURCE_SPEC
          default: "jobs/build-charms/resource-spec.yaml"
      - string:
          name: TO_CHANNEL
          default: 'edge'
          description: |
            Destination charmhub channel for this build.<br>

            If the value is edge, candidate, beta, or stable; releases to both latest/&lt;risk&gt; and &lt;track&gt;/&lt;risk&gt;<br>
            &lt;track&gt; is determined based on the SNAP_K8S_TRACK_MAP and the newest &lt;track&gt; in which &lt;track&gt;/&lt;risk&gt; exists.
      - string:
          name: FROM_CHANNEL
          default: 'edge'
          description: Source charmhub channel (only used in promote jobs)
      - string:
          name: FILTER_BY_TAG
          default: 'k8s,k8s-operator'
          description: |
            Filter the builds by tag (ie. k8s). A tag can also be the name of a
            charm you want to individually build.
      - string:
          name: CHARM_BUILD_DIR
          default: 'build/charms'
      - string:
          name: CHARM_LAYERS_DIR
          default: 'build/layers'
      - string:
          name: CHARM_INTERFACES_DIR
          default: 'build/interfaces'
      - bool:
          name: FORCE
          default: false


# BUILDERS ------------------------------------------------------------------- #
- builder:
    name: set-env
    builders:
      - shell: |-
          #!/bin/bash
          set -eux

          rm -rf /var/lib/jenkins/venvs || true

          export INTEGRATION_TEST_PATH=$WORKSPACE/jobs/integration

          rm -rf $WORKSPACE/.env || true

          export GIT_SSH_COMMAND="ssh -i $HOME/.ssh/cdkbot_rsa -oStrictHostKeyChecking=no"
          export CHARM_BASE_DIR="$WORKSPACE/.cache/charmbuild/$BUILD_TAG"
          export CHARM_BUILD_DIR="$CHARM_BASE_DIR/${{CHARM_BUILD_DIR:-build/charms}}"
          export CHARM_LAYERS_DIR="$CHARM_BASE_DIR/${{CHARM_LAYERS_DIR:-build/layers}}"
          export CHARM_INTERFACES_DIR="$CHARM_BASE_DIR/${{CHARM_INTERFACES_DIR:-build/interfaces}}"
          export CHARM_CHARMS_DIR="$CHARM_BASE_DIR/charms"
          export CHARM_CACHE_DIR="$CHARM_BASE_DIR/cache"

          export GOPATH=$HOME/go
          export GOBIN=$HOME/go/bin
          export PATH=$HOME/go/bin:$PATH

          mkdir -p $HOME/bin || true
          mkdir -p $HOME/go/bin || true
          rm -rf "$WORKSPACE/.cache/charmbuild" || true
          mkdir -p "$CHARM_BUILD_DIR"
          mkdir -p "$CHARM_LAYERS_DIR"
          mkdir -p "$CHARM_INTERFACES_DIR"

          export PATH=/snap/bin:$HOME/bin/:$PATH
          export NODE_LABELS="$NODE_LABELS"
          export TMPDIR="/tmp/$BUILD_TAG"
          export PATH=venv/bin:$PATH
          export PYTHONPATH=$WORKSPACE:"${{PYTHONPATH:-}}"

          rm -rf "$TMPDIR" && mkdir -p "$TMPDIR"

          declare -px > $WORKSPACE/.env

- builder:
    name: run-lxc
    # description: Executes the jenkins run within a lxc container on the runner.
    builders:
      - shell: |-
          #!/usr/bin/env bash
          . $WORKSPACE/lxc_runner.sh

          ci_lxc_init_runner _lxc
          _job_sh=$(basename $(mktemp -p $WORKSPACE --suffix=.sh))

          # push job script into workspace and run
          cat << 'EOF' > $WORKSPACE/$_job_sh

          #!/bin/bash
          set -eux
          set -o allexport
          [[ -f $WORKSPACE/.env ]] && source $WORKSPACE/.env
          set +o allexport

          python3 -m venv venv
          venv/bin/python -m pip install tox
          venv/bin/tox --recreate -e py --notest

          set +u
          source .tox/py/bin/activate
          set -u

          {COMMAND}
          EOF
          ci_lxc_job_run $_lxc -- bash $LXC_WORKSPACE/$_job_sh

- builder:
    name: run-env
    builders:
      - shell: |-
          #!/bin/bash
          set -eux
          set -o allexport
          [[ -f $WORKSPACE/.env ]] && source $WORKSPACE/.env
          set +o allexport

          sudo rm -rf /usr/local/bin/aws
          python3 -m venv venv
          venv/bin/python -m pip install tox wheel

          set +u
          source venv/bin/activate
          set -u

          {COMMAND}


- builder:
    name: run-venv
    builders:
      - shell: |-
          #!/bin/bash
          set -eux
          set -o allexport
          [[ -f $WORKSPACE/.env ]] && source $WORKSPACE/.env
          set +o allexport

          python3 -m venv venv
          venv/bin/python -m pip install tox
          venv/bin/tox --recreate -e py --notest

          set +u
          source .tox/py/bin/activate
          set -u

          {COMMAND}

- builder:
    name: run-tox
    builders:
      - shell: |-
          #!/bin/bash
          set -eux
          set -o allexport
          [[ -f $WORKSPACE/.env ]] && source $WORKSPACE/.env
          set +o allexport

          python3.8 -m venv venv
          venv/bin/python -m pip install tox wheel

          set +u
          source venv/bin/activate
          set -u

          {COMMAND}


# WRAPPERS ------------------------------------------------------------------- #
- wrapper:
    name: default-job-wrapper
    wrappers:
      - ansicolor
      - timestamps
      - workspace-cleanup

- wrapper:
    name: ci-creds
    wrappers:
      - credentials-binding:
          - username-password-separated:
              credential-id: k8s_team_ci_lp
              username: K8STEAMCI_USR
              password: K8STEAMCI_PSW
          - username-password-separated:
              credential-id: cdkbot_github
              username: CDKBOT_GH_USR
              password: CDKBOT_GH_PSW
          - file:
              credential-id: launchpad_creds
              variable: LPCREDS
          - file:
              credential-id: charm_creds
              variable: CHARMCREDS
          - file:
              credential-id: juju_creds
              variable: JUJUCREDS
          - file:
              credential-id: juju_clouds
              variable: JUJUCLOUDS
          - file:
              credential-id: sso_token
              variable: SSOCREDS
          - file:
              credential-id: snapcraft_creds
              variable: SNAPCRAFTCREDS
          - file:
              credential-id: aws_creds
              variable: AWSCREDS
          - file:
              credential-id: surl-creds
              variable: SURLCREDS
          - text:
              credential-id: aws-iam-arn
              variable: AWSIAMARN
          - file:
              credential-id: snapcraft_cpc_creds
              variable: SNAPCRAFTCPCCREDS
          - file:
              credential-id: cdkbot_ssh_rsa
              variable: CDKBOTSSHCREDS
          - text:
              credential-id: NEADER
              variable: NEADER
          - text:
              credential-id: S3LP3
              variable: S3LP3
          - file:
              credential-id: scapestack_creds
              variable: SCAPESTACKCREDS
          - file:
              credential-id: scapestack_cloud
              variable: SCAPESTACKCLOUD
          - file:
              credential-id: tigera-secure-ee-license-key
              variable: TIGERA_SECURE_EE_LICENSE_KEY_FILE
          - file:
              credential-id: tigera-private-registry-credentials
              variable: TIGERA_PRIVATE_REGISTRY_CREDENTIALS_FILE
          - file:
              credential-id: openstack-creds
              variable: OPENSTACK_CREDS
          - file:
              credential-id: deb-gpg-public
              variable: K8STEAMCI_GPG_PUB
          - file:
              credential-id: deb-gpg-private
              variable: K8STEAMCI_GPG_PRIVATE
          - text:
              credential-id: deb-gpg-key
              variable: K8STEAMCI_GPG_KEY
          - text:
              credential-id: charmcraft_creds
              variable: CHARMCRAFT_AUTH
