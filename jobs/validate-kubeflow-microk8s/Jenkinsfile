@Library('juju-pipeline@master') _

def exec(String cmd) {
    sh "juju ssh -m ${CONTROLLER}:default ubuntu/0 -- bash -c 'cd . && ${cmd}'"
}

def tryexec(String cmd) {
    sh "juju ssh -m ${CONTROLLER}:default ubuntu/0 -- bash -c 'cd . && ${cmd}'"
}

pipeline {
    agent {
        label 'runner-amd64'
    }
    /* XXX: Global $PATH setting doesn't translate properly in pipelines
     https://stackoverflow.com/questions/43987005/jenkins-does-not-recognize-command-sh
     */
    environment {
        PATH = "${utils.cipaths}"
        CONTROLLER = "validate-microk8s-${uuid()}"
    }
    options {
        ansiColor('xterm')
        timestamps()
        timeout(time: 1, unit: 'HOURS')
    }
    stages {
//        stage('Set Start Time') {
//            steps {
//                setStartTime()
//            }
//        }
        stage('Setup') {
            steps {
                sh "juju bootstrap --config logging-config='juju.environs.simplestreams=TRACE;<root>=DEBUG' aws/${params.region} ${CONTROLLER}"
                sh "juju deploy -m ${CONTROLLER}:default ubuntu --constraints 'cores=4 mem=16G root-disk=40G'"
                sh "juju wait -vw -m ${CONTROLLER}:default"
                sh "juju status -m ${CONTROLLER}:default"
                sh "juju status -m ${CONTROLLER}:default --format yaml"
            }
        }
        stage('Wait for snap') {
            options {
                retry(20)
            }
            steps {
                exec 'sudo snap install core'
            }
        }
        stage('Install dependencies') {
            steps {
                exec 'sudo snap install charm --classic'
                exec 'sudo snap install jq'
                exec 'sudo snap install juju --classic'
                exec 'sudo snap install juju-helpers --classic --edge'
                exec 'sudo snap install juju-wait --classic'
                exec 'sudo snap install kubectl --classic'
                exec "sudo snap install microk8s --classic --channel ${params.microk8s_channel}"
                exec 'sudo snap install yq'
                exec 'sudo apt update && sudo apt install -y libssl-dev'
                exec 'sudo pip install pytest sh kfp requests pyyaml'
                exec 'sudo usermod -a -G microk8s ubuntu'
                exec "sed -i 's/--anonymous-auth=false/--anonymous-auth=true/g' /var/snap/microk8s/current/args/kubelet"
                exec 'echo \'PATH=$PATH:/snap/bin\' > ~/.bashrc'
            }
        }
        stage('Deploy kubeflow') {
            steps {
                // Copy forked mysql interface from charmed-osm into interfaces dir
                exec 'git clone git://git.launchpad.net/canonical-osm'
                exec 'mkdir -p ~/charms/interfaces'
                exec 'cp -r canonical-osm/charms/interfaces/juju-relation-mysql ~/charms/interfaces/mysql'

                // Deploy Kubeflow to MicroK8s
                exec 'git clone https://github.com/juju-solutions/bundle-kubeflow.git'
                exec 'cd bundle-kubeflow && python3 ./scripts/cli.py microk8s setup'
                exec 'cd bundle-kubeflow && KUBEFLOW_AUTH_PASSWORD=foobar python3 ./scripts/cli.py deploy-to uk8s --build'
                exec 'juju config argo-controller kubelet-insecure=true'
            }
        }
        stage('Validate') {
            steps {
                exec "cd bundle-kubeflow && git checkout ${params.bundle_revision} && ./tests/run.sh"
            }
        }
    }
    post {
//        success {
//            setPass()
//        }
        failure {
//            setFail()
            tryexec 'cd bundle-kubeflow && ./tests/dump-pipeline-logs.sh'
            tryexec 'juju kubectl logs --tail 1000 --all-containers -l juju-app=argo-controller'
            tryexec 'juju kubectl get pods'
            tryexec 'juju kubectl get pods -oyaml'
            tryexec 'juju status'
            tryexec 'juju status --format yaml'
        }
//        always {
//            setEndTime()
//        }
        cleanup {
//            saveMeta()
            sh "juju destroy-controller -y --destroy-all-models --destroy-storage ${CONTROLLER}"
        }
    }
}
