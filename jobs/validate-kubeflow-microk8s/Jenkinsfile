@Library('juju-pipeline@master') _

def exec(cmd) {
    sh "juju ssh -m ${CONTROLLER}:default ubuntu/0 -- bash -c 'cd . && ${cmd}'"
}

pipeline {
    agent {
        label 'runner-amd64'
    }
    /* XXX: Global $PATH setting doesn't translate properly in pipelines
     https://stackoverflow.com/questions/43987005/jenkins-does-not-recognize-command-sh
     */
    environment {
        PATH = "${utils.cipaths}"
        CONTROLLER = "validate-microk8s-${uuid()}"
    }
    options {
        ansiColor('xterm')
        timestamps()
        timeout(time: 1, unit: 'HOURS')
    }
    stages {
//        stage('Set Start Time') {
//            steps {
//                setStartTime()
//            }
//        }
        stage('Setup') {
            steps {
                sh "juju bootstrap --config logging-config='juju.environs.simplestreams=TRACE;<root>=DEBUG' aws/${params.region} ${CONTROLLER}"
                sh "juju deploy -m ${CONTROLLER}:default ubuntu --constraints 'cores=4 mem=16G root-disk=40G'"
                sh "juju wait -vw -m ${CONTROLLER}:default"
                sh "juju status -m ${CONTROLLER}:default"
                sh "juju status -m ${CONTROLLER}:default --format yaml"
            }
        }
        stage('Wait for snap') {
            options {
                retry(20)
            }
            steps {
                exec "sudo snap install core"
            }
        }
        stage('Install dependencies') {
            steps {
                exec "sudo snap install charm --classic"
                exec "sudo snap install jq"
                exec "sudo snap install juju --classic"
                exec "sudo snap install juju-helpers --classic --edge"
                exec "sudo snap install juju-wait --classic"
                exec "sudo snap install kubectl --classic"
                exec "sudo snap install microk8s --classic --channel ${params.microk8s_channel}"
                exec "sudo snap install yq"
                exec "sudo apt update && sudo apt install -y libssl-dev"
                exec "sudo pip install pytest sh kfp requests pyyaml"
            }
        }
        stage('Deploy kubeflow') {
            steps {
                exec "git clone https://github.com/juju-solutions/bundle-kubeflow.git"
                exec 'echo \'PATH=$PATH:/snap/bin\' > ~/.bashrc'
                exec "cd bundle-kubeflow && ./scripts/deploy-microk8s create --build --ci"
            }
        }
        stage('Validate') {
            steps {
                exec "cd bundle-kubeflow && git checkout ${params.bundle_revision} && pytest -vv"
            }
        }
    }
    post {
//        success {
//            setPass()
//        }
//        failure {
//            setFail()
//        }
//        always {
//            setEndTime()
//        }
        cleanup {
//            saveMeta()
            exec "juju status"
            exec "juju status --format yaml"
            sh "juju destroy-controller -y --destroy-all-models --destroy-storage ${CONTROLLER}"
        }
    }
}
