#!/bin/bash
# shellcheck disable=SC2034,SC1090

set -x

###############################################################################
# INITIALIZE
###############################################################################
: "${WORKSPACE:=$(pwd)}"

. "$WORKSPACE/ci.bash"
. "$WORKSPACE/juju.bash"

###############################################################################
# FUNCTION OVERRIDES
###############################################################################
function juju::bootstrap::before
{
    if [ "$JUJU_CLOUD" = "google/us-east1" ] && [ "${HOME}" != "/var/lib/jenkins" ]; then
      # google credentials are stored in a file in ${HOME}/.local/share/juju/gce.json
      # those creds have been mounted in the running container from the jenkins host
      # ensure the in-container path is properly named in the credentials.yaml
      echo "> Updating gce credentials..."
      sed -i "s#/var/lib/jenkins/#${HOME}/#g" ${HOME}/.local/share/juju/credentials.yaml
    else
      echo "> skipping before tasks"
    fi
}


function juju::deploy::overlay
{
    local constraints
    constraints="arch=$ARCH cores=2 mem=8G root-disk=16G"

    cat <<EOF > overlay.yaml
series: null
default-base: $(juju::base::from_series $SERIES)
applications:
  easyrsa:
    constraints: $constraints
    to: null
  etcd:
    constraints: $constraints
  kubernetes-control-plane:
    constraints: $constraints
    options:
      channel: $SNAP_VERSION
      allow-privileged: 'true'
  kubernetes-worker:
    constraints: $constraints
    options:
      channel: $SNAP_VERSION
EOF

    if [ "$JUJU_CLOUD" = "vsphere/Boston" ]; then
      # Deploy vsphere-integrator
      cat <<EOF >> overlay.yaml
  vsphere-integrator:
    charm: vsphere-integrator
    channel: $JUJU_DEPLOY_CHANNEL
    options:
      datastore: vsanDatastore
      folder: k8s-crew-root
    num_units: 1
    trust: true
  vsphere-cloud-provider:
    charm: vsphere-cloud-provider
    channel: $JUJU_DEPLOY_CHANNEL
EOF
    elif [ "$JUJU_CLOUD" = "aws/us-east-1" ]; then
      # Deploy aws
      cat <<EOF >> overlay.yaml
  aws-integrator:
    charm: aws-integrator
    channel: $JUJU_DEPLOY_CHANNEL
    num_units: 1
    trust: true
  aws-cloud-provider:
    charm: aws-cloud-provider
    channel: $JUJU_DEPLOY_CHANNEL
relations:
  - ['aws-integrator', 'kubernetes-control-plane:aws']
  - ['aws-integrator', 'kubernetes-worker:aws']
  - ['aws-cloud-provider:certificates', 'easyrsa:client']
  - ['aws-cloud-provider:kube-control', 'kubernetes-control-plane:kube-control']
  - ['aws-cloud-provider:aws-integration', 'aws-integrator:aws']
  - ['aws-cloud-provider:external-cloud-provider', 'kubernetes-control-plane:external-cloud-provider']
EOF
    elif [ "$JUJU_CLOUD" = "google/us-east1" ]; then
      # Deploy google
      cat <<EOF >> overlay.yaml
  gcp-integrator:
    charm: gcp-integrator
    channel: $JUJU_DEPLOY_CHANNEL
    num_units: 1
    trust: true
  gcp-cloud-provider:
    charm: gcp-cloud-provider
    channel: $JUJU_DEPLOY_CHANNEL
    options:
      enable-loadbalancers: true
EOF
    elif [ "$JUJU_CLOUD" = "azure/centralus" ]; then
      # Deploy azure
      cat <<EOF >> overlay.yaml
  calico:
    options:
      cidr: 172.22.0.0/16
  azure-integrator:
    charm: azure-integrator
    channel: $JUJU_DEPLOY_CHANNEL
    num_units: 1
    trust: true
relations:
  - ['azure-integrator', 'kubernetes-control-plane:azure']
  - ['azure-integrator', 'kubernetes-worker:azure']
EOF
    else
      >&2 echo "Unspecified cloud"
      exit -1
    fi
}

function juju::deploy
{
    juju deploy -m "$JUJU_CONTROLLER:$JUJU_MODEL" \
         --overlay overlay.yaml \
         --force \
         --channel "$JUJU_DEPLOY_CHANNEL" "$JUJU_DEPLOY_BUNDLE" \
         --trust

    juju::deploy-report $? "model-deploy"
}

function juju::wait
{
    # overriding since we're waiting for the deployment
    # to be active/idle except for the kubernetes-control-plane
    # which could be waiting/idle on pending kube-system pods
    # until the additional cloud-provider charms are installed.
    echo "Waiting for deployment to settle..."
    timeout 45m juju-wait -e "$JUJU_CONTROLLER:$JUJU_MODEL" -w -x kubernetes-control-plane

    juju::deploy-report $? "model-wait"
}

function test::execute
{
    juju::pip::2.9

    declare -n is_pass=$1
    timeout -s INT 1h pytest \
        --html="report.html" \
        --json-report \
        --json-report-summary \
        --json-report-file="report.json" \
        --full-trace \
        jobs/integration/test_integrator_charm.py \
        --cloud "$JUJU_CLOUD" \
        --model "$JUJU_MODEL" \
        --controller "$JUJU_CONTROLLER" \
        --charm-channel="$JUJU_DEPLOY_CHANNEL"
    ret=$?
    is_pass="True"
    if (( ret == 124 )); then
        is_pass="Timeout"
    elif (( ret > 0 )); then
        is_pass="False"
    fi

}

###############################################################################
# ENV
###############################################################################
SNAP_VERSION=${1:-1.26/edge}
SERIES=${2:-jammy}
JUJU_DEPLOY_BUNDLE=kubernetes-core
JUJU_DEPLOY_CHANNEL=${3:-edge}
JUJU_CLOUD=${5:-vsphere/Boston}
JUJU_CONTROLLER=validate-$(identifier::short)
JUJU_MODEL=validate-integrator
ARCH=${4:-amd64}
JOB_NAME_CUSTOM="validate-ck-integrator-$JUJU_CLOUD-$SERIES-$SNAP_VERSION"
JOB_ID=$(identifier)

###############################################################################
# START
###############################################################################
ci::run
