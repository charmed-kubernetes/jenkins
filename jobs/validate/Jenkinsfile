@Library('juju-pipeline@master') _

def juju_model = String.format("%s-%s", params.model, uuid())
def juju_controller = String.format("%s-%s", params.controller, uuid())
def validate_sh = "${utils.cipy} validate/validate.py"
def collect_debug_sh = "${utils.cipy} infra/collect-debug.py"
def overlay = params.version_overlay
def custom_bundle_file = ""

pipeline {
    agent {
        label 'runner-cloud'
    }
    /* XXX: Global $PATH setting doesn't translate properly in pipelines
     https://stackoverflow.com/questions/43987005/jenkins-does-not-recognize-command-sh
     */
    environment {
        PATH = "${utils.cipaths}"
    }
    options {
        ansiColor('xterm')
        timestamps()
    }
    stages {
        stage('Deploy: K8s') {
            options {
                timeout(time: 1, unit: 'HOURS')
            }
            steps {
                sh "${utils.cipy} --version"
                setStartTime()
                script {
                    dir('jobs'){
                        if (params.overlay_input) {
                            overlay = "${env.WORKSPACE}/custom_overlay.yaml"
                            def overlay_input = readYaml text: params.overlay_input
                            writeYaml file: overlay, data: overlay_input
                        }
                        if (params.custom_bundle) {
                            custom_bundle_file = "${env.WORKSPACE}/custom_bundle.yaml"
                            def custom_bundle_input = readYaml text: params.custom_bundle
                            writeYaml file: custom_bundle_file, data: custom_bundle_input
                        }
                    }
                }
                sh "juju kill-controller -y ${juju_controller} || true"
                sh "juju bootstrap ${params.cloud} ${juju_controller} --bootstrap-constraints 'arch=amd64' --debug"
                deployCDK(controller: juju_controller,
                          model: juju_model,
                          cloud: params.cloud,
                          bundle: "cs:~containers/${params.bundle}",
                          version_overlay: overlay,
                          bundle_channel: params.bundle_channel,
                          custom_bundle: custom_bundle_file)
            }
        }

        stage('Validate') {
            options {
                timeout(time: 4, unit: 'HOURS')
            }

            when {
                expression { !params.perform_upgrade }
            }
            steps {
                dir('jobs') {
                    sh "CONTROLLER=${juju_controller} MODEL=${juju_model} CLOUD=${params.cloud} ${utils.pytest} --junit-xml=validate.xml integration/test_cdk.py::test_validate"
                }
            }
        }
        stage('Validate Upgrade') {
            options {
                timeout(time: 4, unit: 'HOURS')
            }
            when {
                expression { params.perform_upgrade }
            }
            steps {
                dir('jobs') {
                    sh "TEST_SNAP_CHANNEL=${params.snap_channel} CONTROLLER=${juju_controller} MODEL=${juju_model} CLOUD=${params.cloud} ${utils.pytest} --junit-xml=validate.xml integration/test_cdk.py::test_upgrade"
                }
            }
        }
    }
    post {
        failure {
            setFail()
        }
        success {
            setPass()
        }
        always {
            setEndTime()
            collectDebug(juju_controller, juju_model)
        }
        cleanup {
            saveMeta()
            sh "juju kill-controller -y ${juju_controller} || true"
        }
    }
}
