@Library('juju-pipeline@master') _

def exec(String cmd) {
    sh "sudo lxc exec ${CONTAINER} -- bash -c 'cd . && ${cmd}'"
}

def tryexec(String cmd) {
    sh "sudo lxc exec ${CONTAINER} -- bash -c 'cd . && ${cmd}'", returnStatus: true
}

pipeline {
    agent {
        label 'runner-amd64'
    }
    /* XXX: Global $PATH setting doesn't translate properly in pipelines
     https://stackoverflow.com/questions/43987005/jenkins-does-not-recognize-command-sh
     */
    environment {
        PATH = "${utils.cipaths}"
        CONTAINER = "validate-aws-${uuid()}"
        STORAGE = "validate-aws-${uuid()}"
    }
    options {
        ansiColor('xterm')
        timestamps()
        timeout(time: 1, unit: 'HOURS')
    }
    stages {
//        stage('Set Start Time') {
//            steps {
//                setStartTime()
//            }
//        }
        stage('Setup LXC') {
            steps {
                sh "sudo lxc profile show aws || sudo lxc profile copy default aws"
                sh "sudo lxc profile edit aws < jobs/validate-kubeflow-aws/lxc.profile"
                sh "sudo lxc launch -p default -p aws ubuntu:18.04 ${CONTAINER}"
                sh "sudo lxc file push -p ~/.local/share/juju/credentials.yaml ${CONTAINER}/root/.local/share/juju/credentials.yaml"
            }
        }
        stage('Wait for snap') {
            options {
                retry(10)
            }
            steps {
                exec "sudo snap install core"
            }
        }
        stage('Install dependencies') {
            steps {
                exec 'sudo snap install charm --classic'
                exec 'sudo snap install jq'
                exec "sudo snap install juju --classic --channel ${params.juju_channel}"
                exec 'sudo snap install juju-helpers --classic --edge'
                exec 'sudo snap install juju-wait --classic'
                exec 'sudo snap install kubectl --classic'
                exec 'sudo snap install yq'
                exec 'sudo apt update && sudo apt install -y libssl-dev python3-pip'
                exec 'sudo pip3 install pytest sh kfp requests pyyaml'
            }
        }
        stage('Deploy Kubeflow') {
            steps {
                exec "git clone https://github.com/juju-solutions/bundle-kubeflow.git"
                exec """
                    cd bundle-kubeflow &&
                    git checkout ${params.bundle_revision} &&
                    ./scripts/manage-cdk create --region ${params.region} &&
                    ./scripts/deploy-cdk create --build --ci
                """.replaceAll('\\s+', ' ')
            }
        }
        stage('Validate') {
            steps {
                exec "cd bundle-kubeflow && git checkout ${params.bundle_revision} && ./tests/run.sh"
            }
        }
    }
    post {
//        success {
//            setPass()
//        }
        failure {
//            setFail()
            tryexec 'cd bundle-kubeflow && ./tests/dump-pipeline-logs.sh'
            tryexec 'juju kubectl logs --tail 1000 --all-containers -l juju-app=argo-controller'
            tryexec 'juju kubectl get pods'
            tryexec 'juju kubectl get pods -oyaml'
            tryexec 'juju status'
            tryexec 'juju status --format yaml'
            tryexec 'juju list-controllers'
            tryexec 'juju list-models'
        }
//        always {
//            setEndTime()
//        }
        cleanup {
//            saveMeta()
            exec 'juju show-model cdkkf:kubeflow && juju destroy-model cdkkf:kubeflow -y --destroy-storage --force'
            exec 'juju show-controller cdkkf && juju destroy-controller -y --destroy-all-models --destroy-storage cdkkf'
            sh "sudo lxc delete --force ${CONTAINER}"
        }
    }
}
