#!/bin/bash
# shellcheck disable=SC2034,SC1090

set -ex

###############################################################################
# INITIALIZE
###############################################################################
: "${WORKSPACE:=$(pwd)}"

. "$WORKSPACE/ci.bash"
. "$WORKSPACE/juju.bash"

###############################################################################
# FUNCTION OVERRIDES
###############################################################################
function juju::bootstrap
{
    # override because azure needs image-stream=released
    juju bootstrap "$JUJU_CLOUD" "$JUJU_CONTROLLER" \
         --add-model "$JUJU_MODEL" \
         --bootstrap-base "$(juju::base::from_series $SERIES)" \
         --force \
         --bootstrap-constraints arch="$ARCH" \
         --model-default test-mode=true \
         --model-default resource-tags="owner=$JUJU_OWNER" \
         --model-default image-stream=released \
         --model-default automatically-retry-hooks=true \
         --model-default logging-config="<root>=DEBUG"

    ret=$?
    if (( ret > 0 )); then
        exit "$ret"
    fi
}

function juju::deploy::overlay
{
    # override to set cidr and allow-privileged for sonobuoy
    cat <<EOF > overlay.yaml
series: null
default-base: $(juju::base::from_series $SERIES)
applications:
  calico:
    options:
      cidr: 10.168.0.0/16
  kubernetes-control-plane:
    options:
      channel: $SNAP_VERSION
      allow-privileged: 'true'
  kubernetes-worker:
    options:
      channel: $SNAP_VERSION
EOF
}

function test::execute
{
    declare -n is_pass=$1

    mkdir -p $HOME/.kube
    # this job runs in lxc with a strict juju snap; stdout redir doesn't work,
    # but tee does. use that and fail fast if the kubeconfig is bad (#1273).
    juju ssh -m $JUJU_CONTROLLER:$JUJU_MODEL kubernetes-control-plane/leader -- \
        cat config | tee $HOME/.kube/config >/dev/null
    if ! kubectl version; then
        echo ERROR: Cluster is unreachable
        exit 1
    fi

    # prep azure env
    CK_SEMVER=$(snap find kube-apiserver | grep -o ${CK_VERSION}.[0-9])
    export PATH=${PATH}:$(pwd)
    git clone https://github.com/Azure/azure-arc-validation
    pushd azure-arc-validation/testsuite
    cat <<EOF > ./partner-metadata.md
- Upstream Kubernetes Version: Charmed Kubernetes ${CK_VERSION}
- K8s Distribution Version: v${CK_SEMVER}
- Additional Storage/Network Driver details (if applicable):
- Private Cloud details (if applicable):
- Bare-metal Node details (if applicable):
- OEM/IHV solution details (if applicable):
EOF

    set +x
    source $HOME/.local/share/juju/azure-arc.sh
    if [[ "${UPLOAD_RESULTS}" == "false" ]]; then
      # disable storage account if we don't want to upload results (doesn't impact the test)
      export AZ_STORAGE_ACCOUNT_SAS='invalid'
    else
      # sed treats '&' specially; make sure we escape it if we have any in the key
      export AZ_STORAGE_ACCOUNT_SAS=$(printf %s "${AZ_STORAGE_ACCOUNT_SAS}" | sed 's/&/\\&/g')
    fi
    sed -i \
      -e "s|^az-storage-account=.*|az-storage-account=${AZ_STORAGE_ACCOUNT}|" \
      -e "s|^az-storage-account-sas=.*|az-storage-account-sas=\"${AZ_STORAGE_ACCOUNT_SAS}\"|" \
      -e "s|^offering-name=.*|offering-name=charmed-kubernetes|" \
      -e "s|^global.SUBSCRIPTION_ID=.*|global.SUBSCRIPTION_ID=${AZ_SUBSCRIPTION_ID}|" \
      -e "s|^global.TENANT_ID=.*|global.TENANT_ID=${AZ_TENANT_ID}|" \
      -e "s|^global.RESOURCE_GROUP=.*|global.RESOURCE_GROUP=external-canonical|" \
      -e "s|^global.CLIENT_ID=.*|global.CLIENT_ID=${AZ_CLIENT_ID}|" \
      -e "s|^global.CLIENT_SECRET=.*|global.CLIENT_SECRET=${AZ_CLIENT_SECRET}|" \
      -e "s|^azure-arc-platform.OBJECT_ID=.*|azure-arc-platform.OBJECT_ID=${AZ_OBJECT_ID}|" \
      azure-arc-conformance.properties
    set -x
    kubectl apply -k .
    # give the arc pod 5 minutes to get settled before tailing its logs
    sleep 300
    ARC_POD=$(kubectl get pods -n ${ARC_NS} -o jsonpath="{.items[0].metadata.name}")
    # NB: we always want the logging to succeed so we can watch progress in jenkins;
    # the tail will disconnect when arc tears down (or we timeout)
    timeout -s INT 3h bash -c "kubectl logs -n ${ARC_NS} ${ARC_POD} -f || true"
    ret=$?
    popd

    is_pass="True"
    if (( ret == 124 )); then
        is_pass="Timeout"
    elif (( ret > 0 )); then
        is_pass="False"
    fi
}

function test::capture
{
    # Arc does 3ish runs; get all of them for our artifacts tarball.
    # NB: strip leading '/' and trailing carriage return since busybox 'find' cant.
    ARC_POD=$(kubectl get pods -n ${ARC_NS} -o jsonpath='{.items[?(@.status.phase=="Running")].metadata.name}')
    if [[ -n "${ARC_POD}" ]]; then
        kubectl exec ${ARC_POD} -n ${ARC_NS} -- \
            find / -name 'conformance-results*.gz' 2>/dev/null | \
            sed -e 's|^/||' -e 's|\r$||' | \
            while IFS= read -r result_file; do
                if [[ -n "${result_file}" ]]; then
                    if kubectl cp "${ARC_NS}/${ARC_POD}:${result_file}" "${result_file}"; then
                        echo "Successfully copied ${result_file}"
                    else
                        echo "Failed to copy ${result_file}"
                    fi
                fi
            done
    else
        echo "No ARC pod running to copy results from"
        kubectl logs -n ${ARC_NS} ${ARC_POD} > arc-logs
    fi

    if which juju-crashdump; then
        juju-crashdump -s -a debug-layer -a config -m "$JUJU_CONTROLLER:$JUJU_MODEL"
    fi
    tar -cvzf artifacts.tar.gz ci.log _out meta juju-crashdump* report.* failures* conformance-results*.gz arc-logs || true
    python bin/s3 cp "artifacts.tar.gz" artifacts.tar.gz || true

    echo "@@@ CAPTURE RESULTS @@@"
    echo "@"
    echo "@  http://jenkaas.s3-website-us-east-1.amazonaws.com/$JOB_ID/artifacts.tar.gz"
    echo "@"
    echo "@@@"

    rm -rf azure-arc-validation
}


###############################################################################
# ENV
###############################################################################
JUJU_CLOUD=azure/centralus
JUJU_CONTROLLER=arc-ck-$(identifier::short)
JUJU_DEPLOY_BUNDLE=charmed-kubernetes
JUJU_DEPLOY_CHANNEL=${CK_VERSION}/${CK_RISK}
JUJU_MODEL=arc-ck

ARC_NS=azure-arc-kubernetes-conformance
ARCH=amd64
SERIES=jammy
SNAP_VERSION=${CK_VERSION}/${CK_RISK}

JOB_ID=$(identifier)
JOB_NAME_CUSTOM="arc-ck-$SERIES-$SNAP_VERSION"


###############################################################################
# START
###############################################################################
ci::run
