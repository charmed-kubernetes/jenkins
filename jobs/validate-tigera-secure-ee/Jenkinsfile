@Library('juju-pipeline@master') _

def juju_model = String.format("%s-%s", params.model, uuid())
def juju_controller = String.format("%s-%s", params.controller, uuid())
pipeline {
    agent {
        label 'runner-amd64'
    }
    /* XXX: Global $PATH setting doesn't translate properly in pipelines
     https://stackoverflow.com/questions/43987005/jenkins-does-not-recognize-command-sh
     */
    environment {
        PATH = "${utils.cipaths}"
        TIGERA_SECURE_EE_LICENSE_KEY_FILE = credentials('tigera-secure-ee-license-key')
        TIGERA_PRIVATE_REGISTRY_CREDENTIALS_FILE = credentials('tigera-private-registry-credentials')
    }
    options {
        ansiColor('xterm')
        timestamps()
    }
    stages {
        stage('Deploy: K8s') {
            options {
                timeout(time: 4, unit: 'HOURS')
            }
            steps {
                // setStartTime()
                dir('jobs') {
                    sh "${utils.cipy} integration/tigera_aws.py cleanup"
                    script {
                        sh "CONTROLLER=${juju_controller} ${utils.cipy} integration/tigera_aws.py bootstrap"
                    }
                }
                deployCDK(controller: juju_controller,
                          model: juju_model,
                          cloud: params.cloud,
                          bundle: "cs:~containers/${params.bundle}",
                          version_overlay: params.overlay,
                          bundle_channel: params.bundle_channel,
                          disable_wait: true)
                sh "juju config -m ${juju_controller}:${juju_model} tigera-secure-ee license-key=\$(base64 -w0 ${env.TIGERA_SECURE_EE_LICENSE_KEY_FILE}) registry-credentials=\$(base64 -w0 ${env.TIGERA_PRIVATE_REGISTRY_CREDENTIALS_FILE})"
                dir('jobs') {
                    sh "MODEL=${juju_controller}:${juju_model} ${utils.cipy} integration/tigera_aws.py disable-source-dest-check"
                }
                sh "juju-wait -e ${juju_controller}:${juju_model} -w"
            }
        }

        stage('Validate') {
            options {
                timeout(time: 4, unit: 'HOURS')
            }

            steps {
                dir('jobs') {
                    sh "CONTROLLER=${juju_controller} MODEL=${juju_model} ${utils.pytest} --junit-xml=validate.xml integration/validation.py -m 'not slow'"
                }
            }
        }
    }
    post {
        // failure {
        //     setFail()
        // }
        // success {
        //     setPass()
        // }
        // always {
        //     setEndTime()
        //     collectDebug(juju_controller,
        //                  juju_model)
        // }
        cleanup {
            // saveMeta()
            dir('jobs') {
                script {
                    tearDown(juju_controller)
                    sh "${utils.cipy} integration/tigera_aws.py cleanup"
                }
            }
        }
    }
}
