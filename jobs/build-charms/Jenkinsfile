@Library('juju-pipeline@master') _

def juju_model = String.format("%s-%s", params.model, uuid())
def charm_sh = "tox -e py36 -- python3 build-charms/charms.py"
def cs_url = "cs:~${params.namespace}/${params.charm}"

pipeline {
    agent { label 'runner-amd64' }
    /* XXX: Global $PATH setting doesn't translate properly in pipelines
     https://stackoverflow.com/questions/43987005/jenkins-does-not-recognize-command-sh
     */
    environment {
        PATH = "/snap/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin"
        JUJU_REPOSITORY = "${env.WORKSPACE}/build/charms"
        TMPDIR = "${env.WORKSPACE}/tmp"
    }
    options {
        ansiColor('xterm')
        timestamps()
    }
    stages {
        stage('Setup') {
            steps {
                sh "juju kill-controller -y ${params.controller} || true"
                sh "mkdir -p ${env.JUJU_REPOSITORY}"
                sh "mkdir -p ${env.TMPDIR}"
            }
        }
        stage('Build') {
            options {
                timeout(time: 30, unit: 'MINUTES')
            }
            steps {
                dir('jobs') {
                    sh "git clone --depth 1 -q ${params.git_repo}"
                    sh "${charm_sh} build --repo-path ${params.repo_name} --out-path ${env.JUJU_REPOSITORY}/builds/${params.charm}"
                }
            }
        }
        stage('Test') {
            options {
                timeout(time: 2, unit: 'HOURS')
            }

            steps {
                dir("jobs") {
                    script {
                        def test_path = "integration/charm/test_${params.charm}.py"
                        if (fileExists(test_path)) {
                            sh "juju bootstrap ${params.cloud} ${params.controller} --debug"
                            sh "CHARM_PATH=${env.JUJU_REPOSITORY}/builds/${params.charm} CONTROLLER=${params.controller} MODEL=${juju_model} CLOUD=${params.cloud} tox -e py36 -- pytest --tb native -ra -v -s -n auto --junit-xml=${params.charm}.xml ${test_path}"
                        }
                    }

                }
            }
            post {
                always {
                    sh "juju kill-controller -y ${params.controller} || true"
                }
            }
        }
        stage('Release to Store') {
            options {
                timeout(time: 45, unit: 'MINUTES')
            }
            steps {
                dir('jobs') {
                    sh "${charm_sh} push --repo-path ${params.repo_name} --out-path ${env.JUJU_REPOSITORY}/builds/${params.charm} --charm-entity ${cs_url}"
                    script {
                        if(params.resource_build_sh) {
                            sh "${charm_sh} resource --charm-entity ${cs_url} --builder ${params.repo_name}/${params.resource_build_sh} --out-path ${env.JUJU_REPOSITORY}/tmp/${params.charm} --resource-spec build-charms/resource-spec.yaml"
                        }
                    }
                    sh "${charm_sh} promote --charm-entity ${cs_url} --from-channel unpublished --to-channel edge"
                    sh "${charm_sh} show --charm-entity ${cs_url} --channel edge"
                }
            }
        }
    }
}
