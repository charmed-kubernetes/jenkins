@Library('juju-pipeline@master') _

pipeline {
    agent {
        label "${params.build_node}"
    }
    /* XXX: Global $PATH setting doesn't translate properly in pipelines
     https://stackoverflow.com/questions/43987005/jenkins-does-not-recognize-command-sh
     */
    environment {
        PATH = "${utils.cipaths}"
    }
    parameters {
        string(name: 'DRY_RUN', defaultValue: 'no', description: 'Do not release. Run all tests but do not release.')
        string(name: 'ALWAYS_RELEASE', defaultValue: 'no', description: 'This script will release only on a new patch release. Set this to "yes" if we need to release to beta even if the patch release number is the same.')
        string(name: 'TRACKS', defaultValue: '', description: 'The tracks you want to test and release. For example latest 1.10 1.11 1.12. Leave empty to iterate over all tracks.')
        string(name: 'TESTS_BRANCH', defaultValue: '', description: 'You might want to test with a set of tests that are in your own branch. Here is where you set the branch name.')
        string(name: 'PROXY', defaultValue: '', description: 'Proxy endpoint')
    }
    options {
        ansiColor('xterm')
        timestamps()
        timeout(time: 6, unit: 'HOURS')
    }

    stages {
        stage('Provision VM') {
            steps {
                tearDown(params.controller)
                sh "juju bootstrap ${params.cloud} ${params.controller} -d microk8s-model --bootstrap-constraints arch=${params.arch}"
                sh "juju deploy -m ${params.controller}:microk8s-model ubuntu --constraints 'cores=8 mem=32G root-disk=80G'"
                /* g3s.xlarge and p2.xlarge are for gpu
                   a1.2xlarge for arm, t2.xlarge for amd64
                */
                sh "while ! juju show-status -m ${params.controller}:microk8s-model --format short ubuntu/0 | grep active ; do sleep 10 ; echo waiting... ; done"
            }
        }
        stage('Prepare VM') {
            steps {
                sh "juju run -m ${params.controller}:microk8s-model --unit ubuntu/0 'sudo snap install lxd'"
                sh "juju run -m ${params.controller}:microk8s-model --unit ubuntu/0 --timeout=60m0s 'sudo lxd.migrate -yes'"
                sh "juju run -m ${params.controller}:microk8s-model --unit ubuntu/0 --timeout=60m0s 'sudo lxd init --auto'"
            }
        }
        stage('Setup') {
            steps {
                retry(3) {
                    sh "snapcraft login --with /var/lib/jenkins/snapcraft-creds"
                }
            }
        }
        stage('Test and Release'){
            steps {
                retry(3) {
                    sh "DRY_RUN=${params.DRY_RUN} ALWAYS_RELEASE=${params.ALWAYS_RELEASE} TRACKS=${params.TRACKS} TESTS_BRANCH=${params.TESTS_BRANCH} PROXY=${params.PROXY} JUJU_UNIT=ubuntu/0 JUJU_CONTROLLER=${params.controller}:microk8s-model tox -c jobs/microk8s/tox.ini -e py36 -- python3 jobs/microk8s/release-to-beta.py"
                }
            }
        }
    }
    post {
        cleanup {
            tearDown(params.controller)
        }
    }
}
