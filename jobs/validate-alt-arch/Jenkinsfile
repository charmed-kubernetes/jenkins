@Library('juju-pipeline@master') _

def juju_model = String.format("%s-%s", params.model, uuid())

pipeline {
    agent {
        label "${params.build_node}"
    }
    /* XXX: Global $PATH setting doesn't translate properly in pipelines
     https://stackoverflow.com/questions/43987005/jenkins-does-not-recognize-command-sh
     */
    environment {
        PATH = "/snap/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin"
    }
    options {
        ansiColor('xterm')
        timestamps()
    }
    stages {
        stage("Prep") {
            steps {
                sh "juju kill-controller -y ${params.controller} || true"
                tearDownLxd()
            }
        }
        stage('Deploy: K8s') {
            options {
                timeout(time: 4, unit: 'HOURS')
            }
            steps {
                script {
                    def data = readYaml file: params.version_overlay
                    def arch = sh(
                        script:"arch",
                        returnStdout: true
                    ).trim()
                    def bad_arches = ['s390x', 'aarch64', 'arm64']
                    if(bad_arches.contains(arch)) {
                        echo "Updating overlay b/c of ${arch}"
                        data['applications']['kubernetes-worker'].options.ingress = false
                        data['applications']['kubernetes-master']['options']['enable-metrics'] = false
                        data['applications']['kubernetes-master']['options']['enable-dashboard-addons'] = false
                    }
                    // Localhost specific
                    data['applications']['kubernetes-worker']['options']['proxy-extra-args'] = 'proxy-mode=userspace'
                    sh "rm ${params.version_overlay}"
                    writeYaml file: params.version_overlay, data: data
                    sh "cat ${params.version_overlay}"
                }
                sh '''
                    echo "Ensure pre-existing K8s iptables rules are removed"
                    sudo iptables -F
                    sudo iptables -t mangle -F
                    sudo iptables -t nat -F
                    sudo iptables -X
                    echo "Restarting docker and lxd to recreate required iptables rules"
                    sudo systemctl restart docker.service
                    sudo systemctl restart snap.lxd.daemon.service
                    echo "Listing pre-deployment iptables rules"
                    sudo iptables -n -L
                    sudo iptables -n -L -t mangle
                    sudo iptables -n -L -t nat
                '''
                sh "juju bootstrap ${params.cloud} ${params.controller} --debug"
                sh "juju add-model -c ${params.controller} ${juju_model}"
                sh "cat jobs/validate-alt-arch/lxd-profile.yaml | sed -e \"s/##MODEL##/${juju_model}/\" | sudo lxc profile edit juju-${juju_model}"
                setStartTime()
                deployCDK(controller: params.controller,
                          model: juju_model,
                          cloud: params.cloud,
                          bundle: "cs:~containers/${params.bundle}",
                          version_overlay: params.version_overlay,
                          bundle_channel: params.bundle_channel,
                          disable_add_model: true)
            }
        }

        stage('Validate') {
            options {
                timeout(time: 4, unit: 'HOURS')
            }

            when {
                expression { !params.perform_upgrade }
            }
            steps {
                dir('jobs') {
                    sh "CONTROLLER=${params.controller} MODEL=${juju_model} tox -e py36 -- pytest -v -s --junit-xml=validate.xml integration/test_cdk.py::test_validate"
                }
            }
        }
        stage('Validate Upgrade') {
            options {
                timeout(time: 4, unit: 'HOURS')
            }
            when {
                expression { params.perform_upgrade }
            }
            steps {
                dir('jobs') {
                    sh "TEST_SNAP_CHANNEL=${params.snap_channel} CONTROLLER=${params.controller} MODEL=${juju_model} tox -e py36 -- pytest -v -s --junit-xml=validate.xml integration/test_cdk.py::test_upgrade"
                }
            }
        }
    }
    post {
        failure {
            setFail()
        }

        success {
            setPass()
        }
        always {
            setEndTime()
            sh "sudo lxc profile show default"
            sh '''
                echo "Listing post-deployment iptables rules"
                sudo iptables -n -L
                sudo iptables -n -L -t mangle
                sudo iptables -n -L -t nat
            '''
            collectDebug(params.controller,
                         juju_model)

        }
        cleanup {
            saveMeta()
            sh "juju kill-controller -y ${params.controller}"
            tearDownLxd()
        }
    }
}
